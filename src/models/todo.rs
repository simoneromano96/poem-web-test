//! SeaORM Entity. Generated by sea-orm-codegen 0.2.6

use async_graphql::{SimpleObject, InputObject};
use nanoid::nanoid;
use poem_openapi::Object;
use sea_orm::{entity::prelude::*, Set};
use thiserror::Error;

use crate::functions::get_db::get_db;

#[derive(Debug, Error)]
pub enum TodoError {
    #[error("Database error {0}")]
    DbError(#[from] DbErr),
    #[error("Todo with id {0} not found")]
    NotFound(String),
    #[error("Unknown error")]
    Unknown,
}

#[derive(Clone, Debug, Eq, PartialEq, SimpleObject, Object, DeriveEntityModel)]
#[sea_orm(table_name = "todo")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[oai(read_only)]
    pub id: String,
    pub name: String,
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            _ => panic!("No RelationDef"),
        }
    }
}

impl ActiveModelBehavior for ActiveModel {
    // Override default values
    fn new() -> Self {
        let id = nanoid!();
        Self {
            id: Set(id),
            ..ActiveModelTrait::default()
        }
    }
}

impl Model {
    pub async fn create_one(todo: CreateTodoInput) -> Result<Self, TodoError> {
        let db = get_db().await;
        let CreateTodoInput {
            name, description, ..
        } = todo;
        let new_todo = ActiveModel {
            name: Set(name),
            description: Set(description),
            ..Default::default()
        };
        // let new_todo: ActiveModel = todo.into();
        let mut todo = new_todo
            .insert(db)
            .await
            .map_err(|e| TodoError::DbError(e))?;
        let id = todo.id.take().ok_or(TodoError::Unknown)?;
        Self::find_one(id).await
    }

    pub async fn find_all() -> Result<Vec<Self>, TodoError> {
        let db = get_db().await;
        Entity::find()
            .all(db)
            .await
            .map_err(|e| TodoError::DbError(e))
    }

    pub async fn find_one(id: String) -> Result<Self, TodoError> {
        let db = get_db().await;
        let todo = Entity::find_by_id(id.clone()).one(db).await?;
        todo.ok_or(TodoError::NotFound(id))
    }

    pub async fn update_one(id: String, update: UpdateTodoInput) -> Result<Self, TodoError> {
        let todo = Self::find_one(id.clone()).await?;
        let mut todo: ActiveModel = todo.into();
        if let Some(name) = update.name {
            todo.name = Set(name);
        }
        if let Some(description) = update.description {
            todo.description = Set(Some(description));
        }
        let db = get_db().await;
        todo.update(db).await.map_err(|e| TodoError::DbError(e))?;
        Self::find_one(id).await
    }

    pub async fn delete_one(id: String) -> Result<u64, TodoError> {
        let todo = Self::find_one(id).await?;
        let todo: ActiveModel = todo.into();
        let db = get_db().await;
        let r = todo.delete(db).await.map_err(|e| TodoError::DbError(e))?;
        Ok(r.rows_affected)
    }
}

#[derive(Clone, Debug, Eq, PartialEq, Object, InputObject)]
pub struct CreateTodoInput {
    pub name: String,
    pub description: Option<String>,
}

#[derive(Clone, Debug, Eq, PartialEq, InputObject, Object)]
pub struct UpdateTodoInput {
    pub name: Option<String>,
    pub description: Option<String>,
}
