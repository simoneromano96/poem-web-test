//! SeaORM Entity. Generated by sea-orm-codegen 0.2.6

use async_graphql::SimpleObject;
use poem_openapi::Object;
use sea_orm::entity::prelude::*;

use crate::functions::get_db::get_db;

#[derive(Clone, Debug, Eq, PartialEq, SimpleObject, Object, DeriveEntityModel)]
#[sea_orm(table_name = "todo")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            _ => panic!("No RelationDef"),
        }
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Debug, Clone, Eq, PartialEq, SimpleObject, Object)]
pub struct TodoDAO {
    pub id: i32,
    pub name: String,
    pub description: Option<String>,
}

impl TodoDAO {
    fn from_model(model: Model) -> Self {
        Self {
            id: model.id,
            name: model.name,
            description: model.description,
        }
    }
}

pub async fn get_todos() -> Result<Vec<Model>, DbErr> {
    let db = get_db().await;
    let todos: Vec<Model> = Entity::find().all(db).await?;
    Ok(todos)
    // Ok(todos.into_iter().map(|todo| TodoDAO::from_model(todo)).collect())
}
